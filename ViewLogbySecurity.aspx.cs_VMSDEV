
namespace VMSDev
{
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Globalization;
    using System.Linq;
    using System.Security.Principal;
#pragma warning disable CS0105 // The using directive for 'System.Threading' appeared previously in this namespace
    using System.Threading;
    using System.Threading.Tasks;
#pragma warning restore CS0105 // The using directive for 'System.Threading' appeared previously in this namespace
    using System.Web;
    using System.Web.Services;
    using System.Web.UI;
    using System.Web.UI.WebControls;
    using VMSDev.OneDayAccessCardService;
    using static VMSBusinessLayer.VMSBusinessLayer;


    /// <summary>
    /// partial class view log by security
    /// </summary>
    public partial class ViewLogbySecurity : System.Web.UI.Page
    {
        /// <summary>
        /// The Assign Time Zone Offset method
        /// </summary>
        /// <param name="strTimezoneoffset">The string Time zone offset parameter</param>        
        [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.ReadWrite)]
        public void AssignTimeZoneOffset(string strTimezoneoffset)
        {
            if (!string.IsNullOrEmpty(strTimezoneoffset))
            {
                this.Session["TimezoneOffset"] = strTimezoneoffset;
            }
            else
            {
                this.Session["TimezoneOffset"] = "0";
            }
        }

        /// <summary>
        /// The AssignCurrentDateTime method
        /// </summary>
        /// <param name="currentDate">The currentDate parameter</param>        
        [Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.ReadWrite)]
        public void AssignCurrentDateTime(string currentDate)
        {
            if (!string.IsNullOrEmpty(currentDate))
            {
                this.Session["currentDateTime"] = currentDate;
            }
            else
            {
                this.Session["currentDateTime"] = "0";
            }
        }

        /// <summary>
        /// The button Check Out Request Click method
        /// </summary>
        /// <param name="sender">The sender parameter</param>
        /// <param name="e">The e parameter</param>        
        public void BtnCheckOutRequest_Click(object sender, EventArgs e)
        {
            this.ViewLogbySecurity1.BtnCheckOutRequest_Click(sender, e);
        }

        [WebMethod]
        public static VisitDetails CheckinPopupDisplay(int visitDetailID)
        {
            VMSDataLayer.VMSDataLayer.PropertiesDC propertiesDC = new VMSDataLayer.VMSDataLayer.PropertiesDC();
            VMSBusinessLayer.VMSBusinessLayer.RequestDetailsBL requestDetails = new VMSBusinessLayer.VMSBusinessLayer.RequestDetailsBL();
            propertiesDC = requestDetails.DisplayInfo(visitDetailID);
            VisitDetails visit = new VisitDetails();
            visit.VisitorName = propertiesDC.VisitorMasterProperty.FirstName + ' ' + propertiesDC.VisitorMasterProperty.LastName;
            visit.Organization = propertiesDC.VisitorMasterProperty.Company;
            visit.VisitDate = propertiesDC.VisitorRequestProperty.RequestedDate.ToString("dd-MMM-yyyy");
            DateTime visitInTime = DateTime.Today.Add(TimeSpan.Parse(propertiesDC.VisitorRequestProperty.FromTime.ToString()));
            DateTime visitOutTime = DateTime.Today.Add(TimeSpan.Parse(propertiesDC.VisitorRequestProperty.ToTime.ToString()));
            visit.FromTime = visitInTime.ToString("hh:mm tt");
            visit.ToTime = visitOutTime.ToString("hh:mm tt");
            return visit;
        }
        /// <summary>
        /// The Page_Load method
        /// </summary>
        /// <param name="sender">The sender parameter</param>
        /// <param name="e">The e parameter</param>        
        /// 
        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                this.Session["TypeOfVisit"] = "General";
                Ajax.Utility.RegisterTypeForAjax(typeof(ViewLogbySecurity));
                if (!Page.IsPostBack)
                {
                    if (this.IsHost())
                    {
                        
                            Response.Redirect("HostWP.aspx", true);
                             
                       
                    }
                }
            }
            catch (ThreadAbortException)
            {
            }
            catch (Exception ex)
            {
                Utility.VMSUtility.LogExceptionAndShowErrorPage(ex, HttpContext.Current);
            }
        }

        /// <summary>
        /// The button Hidden Click method
        /// </summary>
        /// <param name="sender">The sender parameter</param>
        /// <param name="e">The e parameter</param>        
        protected void BtnHidden_Click(object sender, EventArgs e)
        {
            this.ViewLogbySecurity1.InitDates();
            this.ViewLogbySecurity1.BindData();
        }

        /// <summary>
        /// The InitializeCulture method
        /// </summary>        
        protected override void InitializeCulture()
        {
            //string selectedLanguage = Thread.CurrentThread.CurrentCulture.Name;
            //this.UICulture = selectedLanguage;
            //this.Culture = selectedLanguage;
            //Thread.CurrentThread.CurrentCulture =
            //    CultureInfo.CreateSpecificCulture(selectedLanguage);
            //Thread.CurrentThread.CurrentUICulture = new
            //    CultureInfo(selectedLanguage);
            base.InitializeCulture();
        }

        /// <summary>
        /// The IsHost method
        /// </summary>
        /// <returns>The boolean type object</returns>        
        protected bool IsHost()
        {
            bool ishost = false;
            try
            {
                if (this.Session["RoleID"] != null)
                {
                    string strRole = Session["RoleID"].ToString();
                    if ((strRole.ToUpper().Equals("SECURITY") || strRole.ToUpper().Equals("SUPERADMIN")) || strRole.ToUpper().Equals("VISITOR DESK"))
                    {
                        ishost = false;
                    }
                    else
                    {
                        ishost = true;
                    }
                }
                else
                {
                    string strUserID = string.Empty;
                    if (this.Session["LoginID"] != null)
                    {
                        strUserID = Session["LoginID"].ToString();
                    }
                    else
                    {
                        // Not modify this - required for SSO 
                        strUserID = VMSUtility.VMSUtility.GetUserId();
                        //// string[] strUserId = HttpContext.Current.Request.LogonUserIdentity.Name.ToString().Split('\\');
                    }

                    List<string> roles = new List<string>();
                    string strRole = string.Empty;
                    roles = new VMSBusinessLayer.VMSBusinessLayer.UserDetailsBL().GetUserRole(strUserID);
                    if (roles != null)
                    {
                        string[] userRoles = new string[roles.Count];
                        for (int i = 0; i < userRoles.Length; i++)
                        {
                            userRoles[i] = roles[i];
                        }

                        if (userRoles.Length > 0)
                        {
                            string roleID = userRoles[0].ToString();

                            this.Session["RoleID"] = roleID;
                            if (roleID.Equals("Security"))
                            {
                                HttpContext.Current.User = new GenericPrincipal(new GenericIdentity(strUserID), new string[] { "Security" });
                            }
                            else if (roleID.Equals("Admin"))
                            {
                                HttpContext.Current.User = new GenericPrincipal(new GenericIdentity(strUserID), new string[] { "Admin" });
                            }
                            else if (roleID.Equals("SuperAdmin"))
                            {
                                HttpContext.Current.User = new GenericPrincipal(new GenericIdentity(strUserID), new string[] { "SuperAdmin" });
                            }
                            else if (roleID.Equals("ReceptionAdmin"))
                            {
                                HttpContext.Current.User = new GenericPrincipal(new GenericIdentity(strUserID), new string[] { "ReceptionAdmin" });
                            }
                            else if (roleID.Equals("IDCardAdmin"))
                            {
                                HttpContext.Current.User = new GenericPrincipal(new GenericIdentity(strUserID), new string[] { "IDCardAdmin" });
                            }
                            else if (roleID.Equals("Visitor Desk"))
                            {
                                HttpContext.Current.User = new GenericPrincipal(new GenericIdentity(strUserID), new string[] { "Visitor Desk" });
                            }
                        }
                    }
                    else
                    {
                        strRole = "Host";
                    }

                    if (strRole.ToUpper().Equals("HOST"))
                    {
                        ishost = true;
                    }
                    else
                    {
                        ishost = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Utility.VMSUtility.LogExceptionAndShowErrorPage(ex, HttpContext.Current);
            }

            return ishost;
        }

        #region CustomMethods
        /// <summary>
        /// method to check the validaity of the Vcard and populate the linked access card number
        /// </summary>
        /// <param name="vcard">the visitor card number</param>
        /// <param name="parentid">the request id</param>
        /// <returns></returns>
        [WebMethod]
        public static string CheckVcardGetAccessCardDetails(string vcard, string type)
        {
            try
            {
                string result = string.Empty;
                if (!string.IsNullOrEmpty(vcard))
                {
                    OneDayAccessCardService.AccessCard_EApprovalClient client = new OneDayAccessCardService.AccessCard_EApprovalClient();
                    var response = client.GetVisitorCardDetails(vcard, type);
                    result = response.CardStatus;

                    VMSDataLayer.VMSDataLayer objdetails = new VMSDataLayer.VMSDataLayer();
                    var cardStatus = objdetails.CheckCardStatus(vcard);
                    if (cardStatus != "Available")
                    {
                        result = "In use or not active";
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// method to check Vcard status
        /// </summary>
        /// <param name="vCard">the visitor card number</param>
        /// <returns>status</returns>
        [WebMethod]
        public static string CheckInVisitorDetails(string vCard)
        {
            try
            {
                VMSBusinessLayer.VMSBusinessLayer objCardDetails = new VMSBusinessLayer.VMSBusinessLayer();
                var response = objCardDetails.CheckCardStatus(vCard);
                return response;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// function to checkout visitor
        /// </summary>
        /// <param name="visitDetailID"></param>
        /// <returns>cisitor card information</returns>
        [WebMethod]
        public static List<string[]> CheckouPopupDisplay(string visitDetailID)
        {
            try
            {
                List<string[]> mylist = new List<string[]>();
                DataTable visiorDetails = new DataTable();
                VMSBusinessLayer.VMSBusinessLayer requestDetails = new VMSBusinessLayer.VMSBusinessLayer();
                visiorDetails = requestDetails.GetVisitorCardInfo(visitDetailID);
                mylist = ConvertTable(visiorDetails);
                return mylist;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// Function to fetch Cardlog details
        /// </summary>
        /// <param name="visitDetailID"></param>
        /// <returns></returns>
        [WebMethod]
        public static List<string[]> GetCardLog(string visitDetailID)
        {
            try
            {
                List<string> visitorDetails = new List<string>();
                VMSDataLayer.VMSDataLayer.PropertiesDC propertiesDC = new VMSDataLayer.VMSDataLayer.PropertiesDC();
                VMSBusinessLayer.VMSBusinessLayer.RequestDetailsBL requestDetails = new VMSBusinessLayer.VMSBusinessLayer.RequestDetailsBL();
                propertiesDC = requestDetails.DisplayInfo(Convert.ToInt32(visitDetailID));
                VisitDetails visit = new VisitDetails();
                visit.VisitorName = propertiesDC.VisitorMasterProperty.FirstName + ' ' + propertiesDC.VisitorMasterProperty.LastName;
                visit.Organization = propertiesDC.VisitorMasterProperty.Company;
                visitorDetails.Add(visit.VisitorName);
                visitorDetails.Add(visit.Organization);
                List<string[]> mylist = new List<string[]>();
                DataTable visiorDetails = new DataTable();
                VMSBusinessLayer.VMSBusinessLayer details = new VMSBusinessLayer.VMSBusinessLayer();
                visiorDetails = details.GetCardLog(visitDetailID);
                if (visiorDetails != null)
                {
                    mylist = ConvertTable(visiorDetails);
                }

                mylist.Add(visitorDetails.Select(i => i.ToString()).ToArray());
                return mylist;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// Function To show Reissue popup
        /// </summary>
        /// <param name="visitDetailID"></param>
        /// <returns></returns>
        [WebMethod]
        public static List<dynamic> ShowReIssuePopup(string visitDetailID)
        {
            try
            {
                VMSDataLayer.VMSDataLayer.PropertiesDC propertiesDC = new VMSDataLayer.VMSDataLayer.PropertiesDC();
                VMSBusinessLayer.VMSBusinessLayer.RequestDetailsBL details = new VMSBusinessLayer.VMSBusinessLayer.RequestDetailsBL();
                propertiesDC = details.DisplayInfo(Convert.ToInt32(visitDetailID));
                List<dynamic> fullList = new List<dynamic>();
                List<dynamic> visitor = new List<dynamic>();
                List<string[]> meetingList = new List<string[]>();
                List<string[]> CardInfo = new List<string[]>();
                DataTable visitorDetails = new DataTable();
                DataTable meetingSchedule = new DataTable();
                VMSBusinessLayer.VMSBusinessLayer requestDetails = new VMSBusinessLayer.VMSBusinessLayer();
                VisitDetails visit = new VisitDetails();
                visit.VisitorName = propertiesDC.VisitorMasterProperty.FirstName + ' ' + propertiesDC.VisitorMasterProperty.LastName;
                visit.Organization = propertiesDC.VisitorMasterProperty.Company;
                visitor.Add(visit.VisitorName);
                visitor.Add(visit.Organization);
                visitorDetails = requestDetails.GetVisitorCardInfo(visitDetailID);
                meetingSchedule = requestDetails.GetVisitorSchedule(visitDetailID);
                meetingList = ConvertTable(meetingSchedule);
                CardInfo = ConvertTable(visitorDetails);
                fullList.Add(meetingList);
                fullList.Add(CardInfo);
                fullList.Add(visitor);
                return fullList;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// Update lost and found vcard
        /// </summary>
        /// <param name="vCards"></param>
        /// <param name="visitDetailsId"></param>
        /// <returns></returns>
        [WebMethod]
        public static bool SurrenderVcard(string vCards, string visitDetailsId)
        {
            try
            {
                VMSDataLayer.VMSDataLayer.PropertiesDC propertiesDC = new VMSDataLayer.VMSDataLayer.PropertiesDC();
                VMSBusinessLayer.VMSBusinessLayer.RequestDetailsBL details = new VMSBusinessLayer.VMSBusinessLayer.RequestDetailsBL();
                propertiesDC = details.DisplayInfo(Convert.ToInt32(visitDetailsId));
                IList<VisitorCard> vcardslist = new List<VisitorCard>();
                AccessCard_EApprovalClient client = new AccessCard_EApprovalClient();
                string action = "surrender";
                var cardsList = vCards.Split(',');
                foreach (var item in cardsList)
                {
                    vcardslist.Add(new VisitorCard { CardSlNumber = item, CardType = "General Visitor", ReasonCode = "0" });
                }


                //invoking service call
                client.UpdateReasonsForVisitorCards(vcardslist.ToArray());
                details.SurrenderLostcard(vCards, visitDetailsId);
                Task.Run(() =>
                {
                    SendCheckinNotificationToHost(Convert.ToInt32(visitDetailsId), propertiesDC, action);
                });

                return true;
            }
            catch(Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// Convert data table to list array
        /// </summary>
        /// <param name="table"></param>
        /// <returns></returns>
        public static List<string[]> ConvertTable(DataTable table)
        {
            try
            {
                return table.Rows.Cast<DataRow>()
                   .Select(row => table.Columns.Cast<DataColumn>()
                      .Select(col => Convert.ToString(row[col]))
                   .ToArray())
                .ToList();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [WebMethod]
        public static List<dynamic> GetVcardSummary(string visitDetailID)
        {
            DataTable visiorDetails = new DataTable();
            List<dynamic> fullList = new List<dynamic>();
            List<string[]> CardList = new List<string[]>();
            try
            {
               
                VMSBusinessLayer.VMSBusinessLayer requestDetails = new VMSBusinessLayer.VMSBusinessLayer();
                visiorDetails = requestDetails.GetVisitorCardInfo(visitDetailID);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            CardList = ConvertTable(visiorDetails);
            fullList.Add(CardList);
           
            return fullList;
        }
        /// <summary>
        /// Function to send mail notifications
        /// </summary>
        /// <param name="visitDeatilID"></param>
        /// <param name="propertiesDC"></param>
        /// <param name="action"></param>
        private static void SendCheckinNotificationToHost(int visitDeatilID, VMSDataLayer.VMSDataLayer.PropertiesDC propertiesDC, string action)
        {
            MailNotification objMailNotofication = new MailNotification();
            MailSMSNotification objMailSMSNotification = new MailSMSNotification();
            VMSBusinessLayer.VMSBusinessLayer.RequestDetailsBL requestInfo = new VMSBusinessLayer.VMSBusinessLayer.RequestDetailsBL();
            UserDetailsBL userObj = new UserDetailsBL();
            if (propertiesDC != null)
            {
                string strFacility = string.Empty;
                DataTable dtlocationDetails = requestInfo.GetLocationDetailsById(propertiesDC.VisitorRequestProperty.RequestID);
                if (dtlocationDetails.Rows.Count > 0)
                {
                    strFacility = Convert.ToString(dtlocationDetails.Rows[0]["Facility"]);
                }

                string strVisitorName = string.Concat(
                Convert.ToString(propertiesDC.VisitorMasterProperty.FirstName),
                " ",
                Convert.ToString(propertiesDC.VisitorMasterProperty.LastName)).ToUpper();
                string strOrganization = Convert.ToString(propertiesDC.VisitorMasterProperty.Company);
                string strRequestId = Convert.ToString(propertiesDC.VisitorRequestProperty.RequestID);
                string strHostID = propertiesDC.VisitorRequestProperty.HostID.ToString().Split('(')[1].Split(')')[0].ToString();
                var userDetails = userObj.GetAssociateDetails(strHostID);
                string firstName = userDetails.Rows[0]["FirstName"].ToString().Trim();
                if (!string.IsNullOrEmpty(userDetails.Rows[0]["LastName"].ToString()))
                {
                    firstName = userDetails.Rows[0]["LastName"].ToString().Trim() + " " + firstName;
                }

                string strHostName = firstName;
                string expectedDate = (propertiesDC.VisitorRequestProperty.ToDate != null) ? ((DateTime)propertiesDC.VisitorRequestProperty.ToDate).ToString("dd-MM-yyy") : "";
                string expectedTime = propertiesDC.VisitorRequestProperty.ToTime.ToString().Split(':')[0] + ":" + propertiesDC.VisitorRequestProperty.ToTime.ToString().Split(':')[1];

                DataTable mailAttachment = new DataTable();
                string date = DateTime.Now.ToString(); ;
                mailAttachment.Clear();
                DataTable cardinfo = requestInfo.GetVisitorDetailsforMailProcess(visitDeatilID, action);
                mailAttachment.Columns.Add("Visitor Name", typeof(string));
                mailAttachment.Columns.Add("Visitor Type", typeof(string));
                mailAttachment.Columns.Add("VCard Number", typeof(string));
                mailAttachment.Columns.Add("Check-In Code", typeof(string));
                mailAttachment.Columns.Add("Visitor badge valid till", typeof(string));
                mailAttachment.Columns.Add("Card surrender location", typeof(string));
                foreach (DataRow row in cardinfo.Rows)
                {
                    mailAttachment.Rows.Add(strVisitorName, propertiesDC.VisitorRequestProperty.Purpose,row["BadgeNo"], visitDeatilID, expectedDate + " " + expectedTime,
                   strFacility);
                }

                objMailSMSNotification.SendMail_Surrender(strHostName, strVisitorName, strFacility, strRequestId, date, strHostID, mailAttachment);
            }
       }
        #endregion
    }
}
