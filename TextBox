
namespace VMSFramework
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Diagnostics.CodeAnalysis;
    using System.Drawing;
    using System.Linq;
    using System.Text;
    using System.Web;
    using System.Web.UI.WebControls;
    using System.Windows.Forms;

    /// <summary>
    /// Partial class for TextBox
    /// </summary>
    public partial class TextBox : System.Web.UI.WebControls.TextBox
    {
        /// <summary>
        /// Text type
        /// </summary>
        /// <param name="gshtTextType">Text Type</param>
        private TextType gshtTextType;

        /// <summary>
        /// Private variable Caption
        /// </summary>
        /// <param name="gstrCaption">variable Caption</param>
        private string gstrCaption;

        #region CONSTRUCTOR
        /// <summary>
        /// Initializes a new instance of the <see cref="TextBox"/> class.
        /// </summary>
        public TextBox()
            : base()
        {
            this.CssClass = "TextField";
            this.IsRequired = false;
        }

        #endregion

        #region DECLARATIONS
        /// <summary>
        /// Text type
        /// </summary>
        /// <param name="TextType">Text Type</param>
[SuppressMessage("Microsoft.Design", "CA1028:EnumStorageShouldBeInt32", Justification = "Reviewed")]
[SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible", Justification = "Reviewed")]
        public enum TextType : short
        {
            /// <summary>
            /// Alpha Numeric
            /// </summary>
            /// <param name="AlphaNumeric">Alpha Numeric</param>
            AlphaNumeric = 0,

            /// <summary>
            /// Alpha Numeric
            /// </summary>
            /// <param name="Date">Date</param>
            Date = 1,

            /// <summary>
            /// Alpha Numeric
            /// </summary>
            /// <param name="Numeric">Numeric</param>
            Numeric = 2,

            /// <summary>
            /// Alpha Numeric
            /// </summary>
            /// <param name="Currency">Currency</param>
            Currency = 3,

            /// <summary>
            /// Alpha Numeric
            /// </summary>
            /// <param name="TextOnly">Text Only</param>
            TextOnly = 4,

            /// <summary>
            /// Alpha Numeric
            /// </summary>
            /// <param name="Email">Email</param>
            Email = 5,

            /// <summary>
            /// Alpha Numeric
            /// </summary>
            /// <param name="CurrencyCode">Currency Code</param>
            CurrencyCode = 6,

            /// <summary>
            /// Alpha Numeric
            /// </summary>
            /// <param name="Hours">Hours</param>
            Hours = 7,

            /// <summary>
            /// Alpha Numeric
            /// </summary>
            /// <param name="MultiplicationFactor">Multiplication Factor</param>
            MultiplicationFactor = 8,

            /// <summary>
            /// Alpha Numeric
            /// </summary>
            /// <param name="UserID">User ID</param>
            UserID = 9,

            /// <summary>
            /// Alpha Numeric
            /// </summary>
            /// <param name="AlphabetsAndNumbersOnly">Alphabets And Numbers Only</param>
            AlphabetsAndNumbersOnly = 10,

            /// <summary>
            /// Alpha Numeric
            /// </summary>
            /// <param name="AlphaNumericWithHyphen">Alpha Numeric With Hyphen</param>
            AlphaNumericWithHyphen = 11,

            /// <summary>
            /// Numeric With Hyphen
            /// </summary>
            /// <param name="NumericWithHyphen">Numeric With Hyphen</param>
            NumericWithHyphen = 12,

            /// <summary>
            ///  Parameter Text
            /// </summary>
            /// <param name="Text">Text</param>
            Text = 13,

            /// <summary>
            /// Parameter Name
            /// </summary>
            /// <param name="Name">Name</param>
            Name = 14,

            /// <summary>
            /// Mobile Number
            /// </summary>
            /// <param name="MobileNumber">Mobile Number</param>
            MobileNumber = 15
        }

        /// <summary>
        /// Custom validation mode
        /// </summary>
        /// <param name="CustomValidation_Mode">Custom validation mode</param>
[SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible", Justification = "Reviewed")]
[SuppressMessage("Microsoft.Design", "CA1028:EnumStorageShouldBeInt32", Justification = "Reviewed")]
        public enum CustomValidation_Mode : short
        {
            /// <summary>
            /// Custom validation mode
            /// </summary>
            /// <param name="On">validation mode ON</param>
            On = 0,

            /// <summary>
            /// Custom validation mode
            /// </summary>
            /// <param name="Off">Custom validation mode Off</param>
            Off = 1
        }

        #endregion

        #region PROPERTIES

        [Bindable(false), Category("Validator"), DefaultValue(false)]

        /// <summary>
        /// Gets or sets a value indicating whether is required or not
        /// </summary>
        public bool IsRequired
        {
            get
            {
                return (bool)ViewState["IsRequired"];
            }

            set
            {
                this.ViewState["IsRequired"] = value;
            }
        }

        [Bindable(false), Category("Validator"), DefaultValue(0)]

        /// <summary>
        /// Gets or sets a value indicating whether custom validation mode on or off
        /// </summary>
        public CustomValidation_Mode CustomValidationMode
        {
            get
            {
                if (this.ViewState["CustomValidationMode"] == null)
                {
                    return 0;
                }
                else
                {
                    return (CustomValidation_Mode)ViewState["CustomValidationMode"];
                }
            }

            set
            {
                this.ViewState["CustomValidationMode"] = value;
            }
        }

        [Bindable(false), Category("Validator"), DefaultValue("&nbsp;*")]

        /// <summary>
        /// Gets or sets a value indicating whether is required or not
        /// </summary>
        public string RequiredFieldValidatorErrorMessage
        {
            get
            {
                if (this.ViewState["RequiredFieldValidatorErrorMessage"] == null)
                {
                    return "&nbsp;*";
                }
                else
                {
                    return ViewState["RequiredFieldValidatorErrorMessage"].ToString();
                }
            }

            set
            {
                this.ViewState["RequiredFieldValidatorErrorMessage"] = value;
            }
        }

        [Bindable(false), Category("Validator"), DefaultValue("&nbsp;*")]

        /// <summary>
        /// Gets or sets a value indicating whether is required or not
        /// </summary>
        public string RegularExpressionFieldValidatorErrorMessage
        {
            get
            {
                if (this.ViewState["RegularExpressionFieldValidatorErrorMessage"] == null)
                {
                    return "&nbsp;*";
                }
                else
                {
                    return ViewState["RegularExpressionFieldValidatorErrorMessage"].ToString();
                }
            }

            set
            {
                this.ViewState["RegularExpressionFieldValidatorErrorMessage"] = value;
            }
        }

        [Bindable(false), Category("Behavior"), DefaultValue(TextType.AlphaNumeric)]

        /// <summary>
        /// Gets or sets a value indicating whether is required or not
        /// </summary>
        public TextType Type
        {
            get
            {
                return this.gshtTextType;
            }

            set
            {
                this.gshtTextType = value;
            }
        }

        [Bindable(false), Category("Appearance"), DefaultValue(TextType.AlphaNumeric)]

        /// <summary>
        /// Gets or sets a value indicating whether is required or not
        /// </summary>
        public string Caption
        {
            get
            {
                return this.gstrCaption;
            }

            set
            {
                this.gstrCaption = value;
            }
        }

        #endregion

        #region OVERRIDING PROCEDURES
        /// <summary>
        /// Gets or sets a value indicating whether is required or not
        /// </summary>
        protected override void CreateChildControls()
        {
            if (this.Enabled && this.gshtTextType == TextType.Date)
            {
                // AddDatePicker();
            }

            if (this.IsRequired)
            {
                this.AddRequiredFieldValidator();
            }

            if (this.CustomValidationMode == CustomValidation_Mode.On && (this.gshtTextType == TextType.Date || this.gshtTextType == TextType.Numeric || this.gshtTextType == TextType.Email || this.gshtTextType == TextType.Currency || this.gshtTextType == TextType.TextOnly || this.gshtTextType == TextType.CurrencyCode || this.gshtTextType == TextType.Hours || this.gshtTextType == TextType.MultiplicationFactor || this.gshtTextType == TextType.UserID || this.gshtTextType == TextType.AlphaNumericWithHyphen || this.gshtTextType == TextType.AlphabetsAndNumbersOnly || this.gshtTextType == TextType.NumericWithHyphen || this.gshtTextType == TextType.Text || this.gshtTextType == TextType.Name || this.gshtTextType == TextType.MobileNumber))
            {
                this.AddFormatValidator();
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether is required or not
        /// </summary>
        /// <param name="writer">render writer</param>
        protected override void Render(System.Web.UI.HtmlTextWriter writer)
        {
            base.Render(writer);
            this.RenderChildren(writer);
        }

        #endregion

        #region PROCEDURES
        /// <summary>
        /// Add Required field validator
        /// </summary>
        private void AddRequiredFieldValidator()
        {
            System.Web.UI.WebControls.RequiredFieldValidator objRequiredFieldValidator = new System.Web.UI.WebControls.RequiredFieldValidator();
            objRequiredFieldValidator.ID = "VldrIsRequired_" + this.UniqueID;
            objRequiredFieldValidator.ControlToValidate = this.ID;
            objRequiredFieldValidator.ToolTip = objRequiredFieldValidator.ErrorMessage;
            objRequiredFieldValidator.Text = "&nbsp;*";
            if (this.RequiredFieldValidatorErrorMessage == null)
            {
                objRequiredFieldValidator.ErrorMessage = "[*] marked fields cannot be blank ";

                // Caption & " cannot be blank !"
            }
            else
            {
                objRequiredFieldValidator.ErrorMessage = this.RequiredFieldValidatorErrorMessage;
                objRequiredFieldValidator.ToolTip = objRequiredFieldValidator.ErrorMessage;
            }

            objRequiredFieldValidator.Display = ValidatorDisplay.Dynamic;
            this.Controls.Add(objRequiredFieldValidator);
        }

        /// <summary>
        /// Sample task class which uses SLIC batch job platform
        /// </summary>
        private void AddFormatValidator()
        {
            System.Web.UI.WebControls.RegularExpressionValidator objRegularFieldValidator = new System.Web.UI.WebControls.RegularExpressionValidator();
            objRegularFieldValidator.ID = "VldrFormat_" + this.UniqueID;
            objRegularFieldValidator.ControlToValidate = this.ID;
            objRegularFieldValidator.ToolTip = objRegularFieldValidator.ErrorMessage;

            // INSTANT C# NOTE: The following VB 'Select Case' included range-type or non-constant 'Case' expressions and was converted to C# 'if-else' logic:
            // Select Case gshtTextType
            // ORIGINAL LINE: Case TextType.Numeric
            // ORIGINAL LINE: Case TextType.Email
            // ORIGINAL LINE: Case TextType.TextOnly
            // objRegularFieldValidator.ValidationExpression = "(^[a-zA-Z,]+\\s+((\\ [a-zA-Z])?[a-zA-Z]*)*$)";
            // ORIGINAL LINE: Case TextType.Date
            // ORIGINAL LINE: Case TextType.Currency
            // ORIGINAL LINE: Case TextType.CurrencyCode
            // ORIGINAL LINE: Case TextType.Hours
            // ORIGINAL LINE: Case TextType.MultiplicationFactor
            // ORIGINAL LINE: Case TextType.UserID
            // private void AddDatePicker()
            // {
            // LiteralControl ltrlCalendar = new LiteralControl();
            // ltrlCalendar.Text = "<A class='linkbutton' onclick=\"javascript:popUpCalendar(document.all." + this.UniqueID.Replace(":", "_") + ",document.all." + this.UniqueID.Replace(":", "_") + ", 'mm/dd/yyyy')\"    onclick='javascript:event.cancelBubble=true;'><IMG align='top' border='0' height='21' id='img" + this.UniqueID.Replace(":", "_") + "' src='" + ((Framework.UI.WebControls.Page)(this.Page)).RootDirectory + "/Includes/calendar/calendar.gif'" + " width='34'></A>";
            // this.Controls.Add(ltrlCalendar);                
            // ((Framework.UI.WebControls.Page)(this.Page)).ContainsDatePicker = true;
            // }   
            if (this.gshtTextType == TextType.Numeric)
            {
                objRegularFieldValidator.ValidationExpression = "(^[0-9]+$)";
            }
            else if (this.gshtTextType == TextType.Email)
            {
                objRegularFieldValidator.ValidationExpression = "^([\\w-]+@[\\w-]+\\.(com|net|org|edu|mil|co.in))|([\\w-]+@[\\w-]+\\.[\\w-]+\\.(com|net|org|edu|mil|co.in))$";
            }
            else if (this.gshtTextType == TextType.TextOnly)
            {
                ////objRegularFieldValidator.ValidationExpression = "^[a-zA-Z]+((\\ [a-zA-Z])?[a-zA-Z]*)*$";
            }
            else if (this.gshtTextType == TextType.Text)
            {
                objRegularFieldValidator.ValidationExpression = "(^[a-zA-Z ,.']*$)";
            }
            else if (this.gshtTextType == TextType.Date)
            {
                objRegularFieldValidator.ValidationExpression = "^(?=\\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\\/|-|\\.)31)\\1|(?:(?:0?[1,3-9]|1[0-2])(\\/|-|\\.)(?:29|30)\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})|(?:0?2(\\/|-|\\.)29\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\\/|-|\\.)(?:0?[1-9]|1\\d|2[0-8])\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2}))($|\\ (?=\\d)))?(((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\ [AP]M))|([01]\\d|2[0-3])(:[0-5]\\d){1,2})?$";
            }
            else if (this.gshtTextType == TextType.Currency)
            {
                objRegularFieldValidator.ValidationExpression = "^([0-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$";
                this.Attributes.Add("style", "text-align:right;");
                this.Attributes.Add("onchange", "javascript:fnFormatAmount(this);");
            }
            else if (this.gshtTextType == TextType.CurrencyCode)
            {
                objRegularFieldValidator.ValidationExpression = "^([a-zA-Z]{3,3})$";
            }
            else if (this.gshtTextType == TextType.Hours)
            {
                objRegularFieldValidator.ValidationExpression = "(^[0-9]+\\d*$)";
            }
            else if (this.gshtTextType == TextType.MultiplicationFactor)
            {
                objRegularFieldValidator.ValidationExpression = "(^[1-9]+\\d*\\.\\d*[0-9]+\\d*$)|(^[1-9]+\\d*$)|(^\\.\\d*[1-9]+\\d*$)|(^[0]+\\d*\\.\\d*[1-9]+\\d*$)";
            }
            else if (this.gshtTextType == TextType.UserID)
            {
                objRegularFieldValidator.ValidationExpression = "(^\\d{6,6}$)";
                this.Attributes.Add("style", "text-align:left;");
            }
            else if (this.gshtTextType == TextType.AlphabetsAndNumbersOnly)
            {
                objRegularFieldValidator.ValidationExpression = "(^[a-zA-Z0-9]+$)";
            }
            else if (this.gshtTextType == TextType.AlphaNumericWithHyphen)
            {
                objRegularFieldValidator.ValidationExpression = "(^[a-zA-Z0-9-]+$)";
            }
            else if (this.gshtTextType == TextType.NumericWithHyphen)
            {
                objRegularFieldValidator.ValidationExpression = "(^[0-9-]+$)";
            }
            else if (this.gshtTextType == TextType.Name)
            {
                objRegularFieldValidator.ValidationExpression = "(^[a-zA-Z ]+[,]+[a-zA-Z ]+$)";
            }
            else if (this.gshtTextType == TextType.MobileNumber)
            {
                objRegularFieldValidator.ValidationExpression = "^\\d{10}";
            }

            objRegularFieldValidator.Text = "&nbsp;*";

            if (this.RequiredFieldValidatorErrorMessage == null)
            {
                objRegularFieldValidator.ErrorMessage = "Invalid values in  [*]  marked fields"; // gstrCaption & " format is invalid !"
            }
            else
            {
                objRegularFieldValidator.ErrorMessage = this.RegularExpressionFieldValidatorErrorMessage;
                objRegularFieldValidator.ToolTip = objRegularFieldValidator.ErrorMessage;
            }

            objRegularFieldValidator.Display = ValidatorDisplay.Dynamic;
            Controls.Add(objRegularFieldValidator);
        }

        #endregion
    }
}
